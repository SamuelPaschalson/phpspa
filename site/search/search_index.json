{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udce6 phpSPA - Build Native PHP SPAs Without JavaScript Frameworks","text":"<p>phpSPA lets you build fast, interactive single-page apps using pure PHP \u2014 with dynamic routing, component architecture, and no full-page reloads. No JavaScript frameworks required.</p> <p> </p>"},{"location":"#our-goal","title":"\ud83c\udfaf Our Goal","text":"<p>To empower PHP developers to create modern, dynamic web apps with the elegance of frontend SPA frameworks \u2014 but fully in PHP.</p> <p>What Makes phpSPA Special</p> <ul> <li> <p>\ud83d\udeab No full-page reloads</p> </li> <li> <p>\u26a1 Instant component swapping</p> </li> <li> <p>\ud83e\uddf1 Clean, function-based components</p> </li> <li> <p>\ud83c\udf0d Real SPA behavior via History API</p> </li> <li> <p>\ud83e\udde0 Built-in State Management</p> </li> </ul>"},{"location":"#key-features","title":"\u2728 Key Features","text":"Core FeaturesDeveloper Experience <ul> <li> <p>\ud83d\udd04 Dynamic Updates - Feels like React, but it's PHP</p> </li> <li> <p>\ud83e\udde9 Component Architecture - Organize your code cleanly</p> </li> <li> <p>\ud83d\udd17 URL Routing - Client and server perfectly synced</p> </li> <li> <p>\ud83e\udde0 State Management - Reactive variables across requests</p> </li> <li> <p>\u2699\ufe0f Lifecycle Support - Loaders, metadata, and more</p> </li> <li> <p>\ud83e\udeb6 Minimal JS - Just one small file</p> </li> </ul> <ul> <li> <p>\u2705 Fully PHP + HTML syntax</p> </li> <li> <p>\u2705 No template engines required</p> </li> <li> <p>\u2705 Dynamic GET &amp; POST routing</p> </li> <li> <p>\u2705 Server-rendered SEO-ready output</p> </li> <li> <p>\u2705 Per-component and global loading indicators</p> </li> <li> <p>\u2705 Supports Composer or manual usage</p> </li> <li> <p>\u2705 Graceful fallback (works without JavaScript)</p> </li> </ul>"},{"location":"#how-it-works","title":"\ud83e\udde0 How It Works","text":"<p>phpSPA follows a simple but powerful concept:</p> <pre><code>graph TD\n    A[Layout] --&gt; B[Contains __ __CONTENT__ __ placeholder]\n    C[Component] --&gt; D[PHP function returning HTML]\n    E[App] --&gt; F[Registers and runs components]\n    G[State] --&gt; H[Manages reactive variables]\n\n    B --&gt; I[Final Rendered Page]\n    D --&gt; I\n    F --&gt; I\n    H --&gt; I</code></pre> <ul> <li>Layout \u2192 The base HTML template with <code>__CONTENT__</code></li> <li>Component \u2192 A PHP function returning HTML</li> <li>App \u2192 Registers and runs components based on routes</li> <li>State \u2192 Simple mechanism for reactive variables</li> </ul>"},{"location":"#quick-start-example","title":"\ud83d\ude80 Quick Start Example","text":"<p>Here's a complete working example with a live counter:</p>"},{"location":"#1-create-the-layout","title":"1. Create the Layout","text":"layout.php<pre><code>&lt;?php\nfunction layout() {\n    return &lt;&lt;&lt;HTML\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;My Live App&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;div id=\"app\"&gt;__CONTENT__&lt;/div&gt;\n            &lt;script src=\"https://cdn.jsdelivr.net/npm/phpspa-js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    HTML;\n}\n</code></pre>"},{"location":"#2-define-components","title":"2. Define Components","text":"components.php<pre><code>&lt;?php\nfunction HomePage() {\n    $counter = createState(\"count\", 0);\n\n    return &lt;&lt;&lt;HTML\n        &lt;h1&gt;Counter: {$counter}&lt;/h1&gt;\n        &lt;button onclick=\"phpspa.setState('count', {$counter} + 1)\"&gt;Increase&lt;/button&gt;\n        &lt;button onclick=\"phpspa.setState('count', 0)\"&gt;Reset&lt;/button&gt;\n        &lt;br&gt;&lt;br&gt;\n        &lt;Link to=\"/login\" label=\"Go to Login\" /&gt;\n    HTML;\n}\n\nfunction LoginPage() {\n    return &lt;&lt;&lt;HTML\n        &lt;h2&gt;Login&lt;/h2&gt;\n        &lt;form method=\"post\"&gt;\n            &lt;input name=\"username\" placeholder=\"Username\"&gt;&lt;br&gt;\n            &lt;input name=\"password\" type=\"password\" placeholder=\"Password\"&gt;&lt;br&gt;\n            &lt;button type=\"submit\"&gt;Login&lt;/button&gt;\n        &lt;/form&gt;\n    HTML;\n}\n</code></pre>"},{"location":"#3-wire-everything-together","title":"3. Wire Everything Together","text":"index.php<pre><code>&lt;?php\nrequire 'layout.php';\nrequire 'components.php';\n\n$app = new App('layout');\n$app-&gt;targetId('app');\n\n$app-&gt;attach(\n    (new Component('HomePage'))\n        -&gt;title('Home')\n        -&gt;method('GET')\n        -&gt;route('/')\n);\n\n$app-&gt;attach(\n    (new Component('LoginPage'))\n        -&gt;title('Login')\n        -&gt;method('GET|POST')\n        -&gt;route('/login')\n);\n\n$app-&gt;run();\n</code></pre> <p>That's It!</p> <p>You now have a fully functional SPA with state management, routing, and dynamic updates \u2014 all in pure PHP!</p>"},{"location":"#state-management-made-simple","title":"\ud83e\udde0 State Management Made Simple","text":"<p>Create reactive state variables in your components:</p> <pre><code>$counter = createState(\"counter\", 0);\n</code></pre> <p>Update from the frontend:</p> <pre><code>phpspa.setState(\"counter\", newValue);\n</code></pre> <p>The component automatically re-renders when state changes! \ud83c\udf89</p>"},{"location":"#installation-options","title":"\ud83d\udce6 Installation Options","text":"Composer (Recommended)Manual InstallationCDN (JavaScript) <pre><code>composer require dconco/phpspa\n</code></pre> <p>Then include the autoloader:</p> <pre><code>&lt;?php\nrequire 'vendor/autoload.php';\n\nuse phpSPA\\App;\nuse phpSPA\\Component;\n</code></pre> <p>Download and include the core files:</p> <pre><code>git clone https://github.com/dconco/phpspa.git\n</code></pre> <pre><code>&lt;?php\nrequire 'path/to/phpspa/core/App.php';\nrequire 'path/to/phpspa/core/Component.php';\n\nuse phpSPA\\App;\nuse phpSPA\\Component;\n</code></pre> <p>Add the client-side engine:</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/phpspa-js\"&gt;&lt;/script&gt;\n</code></pre>"},{"location":"#advanced-features","title":"\ud83d\udee0 Advanced Features","text":""},{"location":"#javascript-events","title":"JavaScript Events","text":"<pre><code>phpspa.on(\"beforeload\", ({ route }) =&gt; showLoader());\nphpspa.on(\"load\", ({ success }) =&gt; hideLoader());\n</code></pre>"},{"location":"#csrf-protection","title":"CSRF Protection","text":"<p>Built-in security features to protect your forms and state changes.</p>"},{"location":"#component-nesting","title":"Component Nesting","text":"<p>Create complex layouts with nested components and props.</p>"},{"location":"#custom-loading-states","title":"Custom Loading States","text":"<p>Show different loaders for different components or routes.</p>"},{"location":"#documentation-structure","title":"\ud83d\udcda Documentation Structure","text":"<p>This documentation is organized to take you from beginner to expert:</p> <p>Learning Path</p> <ol> <li>Introduction - Core concepts and philosophy</li> <li>Getting Started - Installation and setup</li> <li>Creating Components - Your first component</li> <li>Routing - URL handling and parameters</li> <li>Advanced Features - State management and more</li> </ol>"},{"location":"#why-choose-phpspa","title":"\ud83c\udf1f Why Choose phpSPA?","text":"Traditional PHP phpSPA React/Vue Full page reloads \u26a1 Instant updates \u26a1 Instant updates No state management \ud83e\udde0 Built-in state \ud83e\udde0 Complex state Server-side only \ud83c\udf10 Server + Client \ud83c\udf10 Client-heavy Simple but limited \ud83d\udcaa Simple AND powerful \ud83d\udd27 Complex setup"},{"location":"#about-the-creator","title":"\ud83e\uddd1\u200d\ud83d\udcbb About the Creator","text":"<p>phpSPA is maintained by Dave Conco - a developer who believes in keeping things simple, fast, and native to PHP.</p>"},{"location":"#support-the-project","title":"\ud83c\udf1f Support the Project","text":"<p>If you find phpSPA useful, please consider:</p> <ul> <li>\u2b50 Starring us on GitHub</li> <li>\ud83d\udcd6 Sharing this documentation</li> <li>\ud83d\udc1b Reporting bugs or suggesting features</li> </ul> <p>Your support helps keep the project alive and growing! \u2764\ufe0f</p>"},{"location":"#license","title":"\ud83d\udcd8 License","text":"<p>MIT License \u00a9 dconco</p> <p>Ready to build your first PHP SPA? Let's start with the Introduction! \ud83d\ude80</p>"},{"location":"1-introduction/","title":"\ud83d\udcd8 phpSPA Documentation","text":""},{"location":"1-introduction/#introduction","title":"\ud83c\udfe0 Introduction","text":"<p>Welcome to phpSPA, a lightweight PHP framework for building dynamic, component-based single-page applications (SPAs) \u2014 without leaving PHP or relying on heavy frontend frameworks.</p> <p>phpSPA brings the modern SPA experience (like React or Vue) to standard PHP by dynamically swapping page content using custom PHP components, while keeping your existing HTML and PHP workflow.</p>"},{"location":"1-introduction/#what-is-phpspa","title":"\ud83d\ude80 What is phpSPA?","text":"<p>phpSPA is a pure PHP library that lets you:</p> <ul> <li>Write components as standard PHP functions that return HTML.</li> <li>Define routes and HTTP methods tied to components.</li> <li>Dynamically update a specific section of your page without full reloads.</li> <li>Maintain SEO and initial performance with server-side rendering of the first component.</li> <li>Handle loading indicators globally or per-component.</li> </ul> <p>All without requiring JavaScript frameworks or a build step.</p>"},{"location":"1-introduction/#why-use-phpspa","title":"\ud83e\udde0 Why Use phpSPA?","text":"<p>If you're a PHP developer who wants:</p> <ul> <li>\u2705 A modern, dynamic user experience (like SPAs)</li> <li>\u2705 To avoid full page reloads on navigation</li> <li>\u2705 To stay within the comfort of PHP</li> <li>\u2705 No complex build tools, no virtual DOMs</li> <li>\u2705 A component-based structure like React \u2014 but in PHP</li> </ul> <p>Then phpSPA is for you.</p>"},{"location":"1-introduction/#key-features","title":"\ud83d\udee0 Key Features","text":"<ul> <li>\u2705 Component-based architecture</li> <li>\u2705 Dynamic content swapping with browser history support</li> <li>\u2705 Server-side rendering for initial load</li> <li>\u2705 Route handling by HTTP method (<code>GET</code>, <code>POST</code>, etc.)</li> <li>\u2705 Fully customizable layout and loading experience</li> </ul>"},{"location":"1-introduction/#installation","title":"\ud83d\udce6 Installation","text":"<p>If you\u2019re using Composer (which you probably should), install phpSPA like this:</p> <pre><code>composer require dconco/phpspa\n</code></pre> <p>To install manually and include each file manually in your project:</p> <pre><code># Clone the repository into your project\ngit clone https://github.com/dconco/phpspa.git\n</code></pre> <p>Done \u2705</p>"},{"location":"1-introduction/#next-steps","title":"\ud83d\udc47 Next Steps","text":"<p>\u27a1\ufe0f Getting Started \u27a1\ufe0f Creating Your First Component \u27a1\ufe0f Understanding Routing and Parameters</p>"},{"location":"10-component-nesting/","title":"\ud83e\uddec Component Nesting (Using Components Inside Components)","text":"<p>You can call one component inside another just like a normal function \u2014 because in phpSPA, components are just PHP functions.</p>"},{"location":"10-component-nesting/#example","title":"\u2705 Example","text":"<pre><code>function Sidebar() {\n    return \"&lt;aside&gt;Sidebar content&lt;/aside&gt;\";\n}\n\nfunction Dashboard(array $path = [], $request = null) {\n    return &lt;&lt;&lt;HTML\n        &lt;div&gt;\n            {Sidebar()}\n            &lt;main&gt;Dashboard main content&lt;/main&gt;\n        &lt;/div&gt;\n    HTML;\n}\n</code></pre> <p>Just make sure if the component you're nesting accepts <code>$path</code> or <code>$request</code>, you pass them or give default values, even if you won\u2019t use them.</p>"},{"location":"10-component-nesting/#common-patterns","title":"\ud83d\udd04 Common Patterns","text":"<p>You might see patterns like:</p> <pre><code>use phpSPA\\Http\\Request;\n\nfunction Wrapper($path = [], Request $request = new Request()) {\n    return &lt;&lt;&lt;HTML\n        &lt;div&gt;\n            {Header()}\n            &lt;section&gt;{MainContent($path, $request)}&lt;/section&gt;\n            {Footer()}\n        &lt;/div&gt;\n    HTML;\n}\n</code></pre> <p>This is how you build layouts or reusable containers.</p>"},{"location":"10-component-nesting/#dont-forget","title":"\u26a0\ufe0f Don\u2019t Forget","text":"<p>If the nested component relies on <code>$path</code> or <code>$request</code>, they must be defined in its argument list, even if empty. Example:</p> <pre><code>function Profile($path = [], Request $request = new Request()) { ... }\n</code></pre> <p>\u27a1\ufe0f Up next: Component Props (Passing Data to Components)</p>"},{"location":"11-component-props/","title":"\ud83e\uddec Component Props (Passing Data to Components)","text":"<p>In phpSPA, since components are just PHP functions, you can pass props the same way you\u2019d pass arguments to functions.</p>"},{"location":"11-component-props/#basic-example","title":"\u2705 Basic Example","text":"<pre><code>function Admin(string $name, int $age, array $path = []) {\n    return \"&lt;h1&gt;$name - $age&lt;/h1&gt;\";\n}\n</code></pre> <p>Now you can render it inside another component like this:</p> <pre><code>function Dashboard(array $path) {\n    return Admin(name: \"dconco\", age: 10, path: $path);\n}\n</code></pre> <p>\ud83d\udd39 All props passed must match the function\u2019s argument names. \ud83d\udd39 <code>path</code> is optional, but useful when reusing components tied to a route.</p>"},{"location":"11-component-props/#path-special-note","title":"\u2699\ufe0f <code>$path</code> Special Note","text":"<p><code>$path</code> is automatically injected by phpSPA when the component is matched via a route with dynamic parameters (like <code>/user/{id}</code>).</p> <p>But when manually reusing a component inside another one, you must do one of these:</p> <ol> <li>Provide a default value:</li> </ol> <pre><code>   function Admin(string $name, int $age, array $path = []) { ... }\n</code></pre> <ol> <li>Pass <code>$path</code> explicitly from the parent:</li> </ol> <pre><code>function Dashboard(array $path) {\n   return Admin(name: \"dconco\", age: 10, path: $path);\n}\n</code></pre>"},{"location":"11-component-props/#request-argument","title":"\ud83e\uddea <code>$request</code> Argument","text":"<p>If your component uses <code>$request</code>, just define it like this:</p> <pre><code>use phpSPA\\Http\\Request;\n\nfunction Admin(string $name, int $age, array $path = [], Request $request = new Request()) {\n    $id = $path[\"id\"] ?? 1;\n    $query = $request(\"q\", \"default\");\n    return \"&lt;h1&gt;$name - $age - $id&lt;/h1&gt;\";\n}\n</code></pre> <p>Even though <code>$request</code> is auto-injected when the route is hit directly, you should provide a default value when reusing the component \u2014 that way it won\u2019t break.</p> <p>\u2705 This is the best practice:</p> <pre><code>Request $request = new Request()\n</code></pre>"},{"location":"11-component-props/#summary-prop-rules","title":"\ud83d\udd04 Summary: Prop Rules","text":"Argument Required? Default Needed? When? Custom Props (e.g. <code>$name</code>) Yes Always provide default or pass manually <code>$path</code> Provided by phpSPA Default if reusing manually <code>$request</code> Provided by phpSPA Always set <code>new Request()</code> when reusing <p>\u27a1\ufe0f Up next: Route Case Sensitivity</p>"},{"location":"12-route-case-sensitivity/","title":"\ud83d\udd21 Route Case Sensitivity","text":"<p>phpSPA routes are case-insensitive by default \u2014 that means <code>/Login</code> and <code>/login</code> are treated the same.</p> <p>But you can change that behavior globally or per component.</p>"},{"location":"12-route-case-sensitivity/#global-setting","title":"\ud83c\udf0d Global Setting","text":"<pre><code>$app-&gt;defaultToCaseSensitive();\n</code></pre> <p>This will make all routes case-sensitive unless overridden.</p>"},{"location":"12-route-case-sensitivity/#per-component","title":"\ud83d\udd27 Per Component","text":"<p>You can override the case-sensitivity for individual components.</p> <pre><code>$component-&gt;caseSensitive();     // Force sensitivity for this one\n$component-&gt;caseInsensitive();   // Explicitly make this one case-insensitive\n</code></pre> <p>This is useful if:</p> <ul> <li>You want case-insensitivity generally, but a few routes must be strict.</li> <li>You want to allow <code>/Dashboard</code> and <code>/dashboard</code> to act differently.</li> </ul>"},{"location":"12-route-case-sensitivity/#real-world-use-case","title":"\ud83d\udd0e Real-World Use Case","text":"<pre><code>$one = new Component('Admin');\n$one-&gt;route(\"/Admin\");\n$one-&gt;caseSensitive();\n\n$two = new Component('Admin');\n$two-&gt;route(\"/admin\");\n$two-&gt;caseInsensitive(); // Optional here \u2014 it's default anyway\n</code></pre> <p>Without case sensitivity:</p> <ul> <li><code>/Admin</code> and <code>/admin</code> would both go to the same component.</li> </ul> <p>With case sensitivity enabled:</p> <ul> <li>Only exact-case matches will work.</li> </ul> <p>\u27a1\ufe0f Up next: Setting Page Titles</p>"},{"location":"13-setting-page-titles/","title":"\ud83c\udff7\ufe0f Setting Page Titles","text":"<p>Each component in phpSPA can define its own page title \u2014 just like you\u2019d set <code>&lt;title&gt;</code> in a regular HTML <code>&lt;head&gt;</code>. But instead of hardcoding it in your layout, phpSPA lets components control their own titles dynamically.</p>"},{"location":"13-setting-page-titles/#how-to-set-a-title","title":"\ud83d\udd27 How to Set a Title","text":"<p>Just use the <code>title()</code> method on the component:</p> <pre><code>$login = new Component('LoginPage');\n$login-&gt;route(\"/login\");\n$login-&gt;title(\"Login - phpSPA\");\n</code></pre> <p>Whenever this component is rendered, phpSPA will automatically update the browser\u2019s title bar with what you set here.</p>"},{"location":"13-setting-page-titles/#why-its-useful","title":"\ud83d\udccc Why It's Useful","text":"<ul> <li>Gives users proper context in the browser tab</li> <li>Helps with SEO</li> <li>Updates correctly on client-side navigation</li> <li>Keeps layout file clean and generic</li> </ul> <p>\ud83d\udca1 You can dynamically set different titles per page, like:</p> <pre><code>$dashboard-&gt;title(\"Welcome \" . $user-&gt;name);\n</code></pre> <p>Just be sure this is done before the component renders.</p> <p>\u27a1\ufe0f Up next: Handling Error Routes (404 Pages)</p>"},{"location":"14-handling-error-routes/","title":"Handling Error Routes","text":""},{"location":"14-handling-error-routes/#handling-unknown-routes-404-pages","title":"\u274c Handling Unknown Routes (404 Pages)","text":"<p>In phpSPA, catching unknown or invalid routes is super simple \u2014 you just define a route with a wildcard pattern using <code>*</code>.</p>"},{"location":"14-handling-error-routes/#example-404-component","title":"\ud83d\udd27 Example: 404 Component","text":"<pre><code>$notFound = new Component('NotFoundPage');\n$notFound-&gt;route(\"pattern: *\");\n$notFound-&gt;title(\"404 - Page Not Found\");\n</code></pre> <p>This tells phpSPA:</p> <p>\u201cIf no route matches the current path, fall back to this component.\u201d</p> <p>You don\u2019t need a separate HTTP response or logic \u2014 just register this wildcard route like any other.</p>"},{"location":"14-handling-error-routes/#how-it-works","title":"\ud83e\udde0 How It Works","text":"<p>phpSPA uses <code>fnmatch()</code> under the hood, so <code>*</code> means \u201cmatch anything\u201d. But since this route is checked last, it only kicks in if nothing else matches.</p> <p>This is perfect for:</p> <ul> <li>404 Not Found pages</li> <li>Maintenance pages</li> <li>Fallback layouts</li> </ul>"},{"location":"14-handling-error-routes/#example-404-component_1","title":"\u2705 Example 404 Component","text":"<pre><code>function NotFoundPage() {\n    return &lt;&lt;&lt;HTML\n       &lt;h1&gt;404&lt;/h1&gt;\n       &lt;p&gt;Sorry, we couldn't find that page.&lt;/p&gt;\n       &lt;Link to=\"/\" label=\"Go Home\" /&gt;\n    HTML;\n}\n</code></pre>"},{"location":"14-handling-error-routes/#403-forbidden","title":"\ud83d\udeab 403 - Forbidden","text":"<p>You can show a 403 page when users try to access areas they\u2019re not allowed to.</p> <p>There are two ways to handle this:</p>"},{"location":"14-handling-error-routes/#1-inside-the-component-recommended","title":"\ud83d\udd39 1. Inside the Component (Recommended)","text":"<p>You can conditionally return a different component if access isn\u2019t allowed:</p> <pre><code>function AdminPage(Request $request = new Request()) {\n    if (!$request(\"is_admin\")) {\n        return ForbiddenPage();\n    }\n\n    return &lt;&lt;&lt;HTML\n        &lt;h1&gt;Admin Panel&lt;/h1&gt;\n    HTML;\n}\n</code></pre> <p>Your <code>ForbiddenPage</code> component could be:</p> <pre><code>function ForbiddenPage() {\n    return &lt;&lt;&lt;HTML\n        &lt;h1&gt;403 - Access Denied&lt;/h1&gt;\n        &lt;p&gt;You don\u2019t have permission to view this page.&lt;/p&gt;\n    HTML;\n}\n</code></pre> <p>You don\u2019t need to register a route for <code>ForbiddenPage</code> if it\u2019s only used internally.</p>"},{"location":"14-handling-error-routes/#2-as-its-own-route","title":"\ud83d\udd39 2. As Its Own Route","text":"<p>If you want to access a <code>403</code> route directly:</p> <pre><code>$forbidden = new Component('ForbiddenPage');\n$forbidden-&gt;route(\"/forbidden\");\n$forbidden-&gt;title(\"403 - Forbidden\");\n</code></pre> <p>Then in other components, just return <code>{ForbiddenPage()}</code> or <code>Navigate.push('/forbidden')</code>.</p>"},{"location":"14-handling-error-routes/#maintenance-mode-temporarily-override-all-routes","title":"\ud83d\udee0\ufe0f Maintenance Mode (Temporarily Override All Routes)","text":"<p>If you're updating the app and want to show a maintenance screen for everything, just use a global route pattern:</p> <pre><code>$maintenance = new Component('MaintenancePage');\n$maintenance-&gt;route(\"pattern: *\");\n$maintenance-&gt;title(\"We're Updating\");\n</code></pre> <p>This overrides everything, including valid routes.</p>"},{"location":"14-handling-error-routes/#dynamic-toggle","title":"\ud83d\udd01 Dynamic Toggle","text":"<p>You could add a toggle like this:</p> <pre><code>if ($maintenanceModeEnabled) {\n    $maintenance = new Component('MaintenancePage');\n    $maintenance-&gt;route(\"pattern: *\");\n}\n</code></pre> <p>So you can control whether the override is active or not.</p>"},{"location":"14-handling-error-routes/#combining-error-handling","title":"\ud83e\uddea Combining Error Handling","text":"<p>You can even combine patterns:</p> <pre><code>$notFound-&gt;route(\"pattern: *\");        // Fallback for unknown routes\n$maintenance-&gt;route(\"pattern: *\");     // Overrides all, if enabled\n</code></pre> <p>Just make sure you register components in the right order \u2014 phpSPA picks the first match.</p> <p>\u27a1\ufe0f Up next: Javascript Navigation</p>"},{"location":"15-javascript-navigation/","title":"\ud83e\udded JavaScript Navigation: <code>phpspa.navigate()</code>","text":"<p>phpSPA provides seamless, JavaScript-powered page transitions without reloads. You can trigger route changes using <code>phpspa.navigate()</code> and manage browser history with a few simple helpers.</p>"},{"location":"15-javascript-navigation/#include-the-js-file","title":"\ud83d\udccc Include the JS File","text":"<p>Ensure the phpSPA JavaScript file is loaded in your layout (before the closing <code>&lt;/body&gt;</code> tag):</p> <pre><code>&lt;script src=\"https://cdn.jsdelivr.net/npm/phpspa-js\"&gt;&lt;/script&gt;\n</code></pre> <p>This enables dynamic routing, component swapping, <code>&lt;Link /&gt;</code>, state updates, and more.</p>"},{"location":"15-javascript-navigation/#link-inline-navigation-element","title":"\ud83d\udd17 <code>&lt;Link /&gt;</code> \u2014 Inline Navigation Element","text":"<p>To create client-side links without reloading the page, use the custom <code>&lt;Link /&gt;</code> tag:</p> <pre><code>&lt;Link to=\"/login\" label=\"Go to Login\" /&gt;\n</code></pre>"},{"location":"15-javascript-navigation/#attributes","title":"\u2705 Attributes","text":"Attribute Description <code>to</code> (Required) The route to navigate to. <code>label</code> (Optional) Text content of the anchor. <p>phpSPA automatically renders this as an <code>&lt;a href=\"/login\"&gt;Go to Login&lt;/a&gt;</code> element and intercepts the click event to perform a dynamic transition.</p>"},{"location":"15-javascript-navigation/#javascript-navigation-api","title":"\u2699\ufe0f JavaScript Navigation API","text":"<p>Use the global <code>phpspa</code> object for manual routing control:</p>"},{"location":"15-javascript-navigation/#phpspanavigatepath-state-push","title":"<code>phpspa.navigate(path, state = \"push\")</code>","text":"<p>Navigate to a new route.</p> <ul> <li><code>path</code>: The route to go to.</li> <li><code>state</code>: <code>\"push\"</code> (default) or <code>\"replace\"</code>.</li> </ul> <pre><code>phpspa.navigate(\"/dashboard\"); // push to history\nphpspa.navigate(\"/login\", \"replace\"); // replace current history\n</code></pre>"},{"location":"15-javascript-navigation/#phpspaback","title":"<code>phpspa.back()</code>","text":"<p>Go back in browser history:</p> <pre><code>phpspa.back();\n</code></pre>"},{"location":"15-javascript-navigation/#phpspaforward","title":"<code>phpspa.forward()</code>","text":"<p>Go forward in browser history:</p> <pre><code>phpspa.forward();\n</code></pre>"},{"location":"15-javascript-navigation/#phpspareload","title":"<code>phpspa.reload()</code>","text":"<p>Reload the currently mounted component:</p> <pre><code>phpspa.reload();\n</code></pre>"},{"location":"15-javascript-navigation/#event-hooks-phpspaon","title":"\ud83d\udce1 Event Hooks: <code>phpspa.on(...)</code>","text":"<p>You can listen to lifecycle events using <code>phpspa.on()</code>:</p> <pre><code>phpspa.on(\"beforeload\", ({ route }) =&gt; {\n  console.log(\"Loading:\", route);\n});\n\nphpspa.on(\"load\", ({ route, success, error }) =&gt; {\n  if (success) {\n    console.log(\"Route loaded:\", route);\n  } else {\n    console.error(\"Failed to load:\", route, error);\n  }\n});\n</code></pre>"},{"location":"15-javascript-navigation/#event-types","title":"Event Types","text":"Event Description <code>beforeload</code> Fires before a component fetch starts <code>load</code> Fires after a component is loaded or failed to load <p>Both events receive an object with:</p> <ul> <li><code>route</code> \u2192 the route being loaded</li> <li><code>success</code> \u2192 <code>true</code> or <code>false</code></li> <li><code>error</code> \u2192 an error object if <code>success</code> is false</li> </ul>"},{"location":"15-javascript-navigation/#component-styles-scripts","title":"\ud83e\udde9 Component Styles &amp; Scripts","text":"<p>Each component can define its own styles and scripts using these special blocks:</p>"},{"location":"15-javascript-navigation/#inline-component-style","title":"\u2705 Inline Component Style","text":"<pre><code>&lt;style data-type=\"phpspa/css\"&gt;\n  .page {\n    padding: 20px;\n  }\n&lt;/style&gt;\n</code></pre>"},{"location":"15-javascript-navigation/#inline-component-script","title":"\u2705 Inline Component Script","text":"<pre><code>&lt;script data-type=\"phpspa/script\"&gt;\n  console.log(\"Component script mounted\");\n&lt;/script&gt;\n</code></pre> <p>These blocks are handled and injected dynamically by the phpSPA JS runtime whenever components are swapped.</p> <p>\u27a1\ufe0f Up next: State Management</p> <p>Here\u2019s your refined and updated documentation based on your current phpSPA JavaScript system \u2014 including your latest changes such as the use of <code>phpspa.on(...)</code>, custom <code>&lt;Link /&gt;</code>, and your <code>Navigate</code> class logic:</p>"},{"location":"16-csrf-protection/","title":"\ud83d\udee1\ufe0f CSRF Protection","text":"<p>phpSPA helps with most routing and input validation internally, but CSRF protection is your job \u2014 and it\u2019s simple.</p>"},{"location":"16-csrf-protection/#step-1-add-csrf-token-to-forms","title":"\ud83d\udd10 Step 1: Add CSRF Token to Forms","text":"<p>Just include <code>{csrf()}</code> anywhere in your form markup:</p> <pre><code>&lt;form method=\"POST\"&gt;\n    {csrf()}\n    &lt;input name=\"email\" /&gt;\n    &lt;button type=\"submit\"&gt;Send&lt;/button&gt;\n&lt;/form&gt;\n</code></pre> <p>This will output:</p> <pre><code>&lt;input type=\"hidden\" name=\"csrf\" value=\"...\" /&gt;\n</code></pre>"},{"location":"16-csrf-protection/#step-2-validate-on-the-server","title":"\u2705 Step 2: Validate on the Server","text":"<p>In your component:</p> <pre><code>use phpSPA\\Http\\Request;\n\nfunction SubmitPage(Request $request) {\n    if ($request(\"csrf\") === __CSRF__) {\n        // Token is valid \u2014 proceed\n    } else {\n        // Invalid token \u2014 reject request\n    }\n}\n</code></pre> <p>No additional libraries or sessions are required \u2014 phpSPA takes care of generating the token.</p> <p>\u27a1\ufe0f Up next: State Management</p>"},{"location":"17-state-management/","title":"\ud83e\udde0 State Management","text":"<p>phpSPA supports reactive state between the frontend and backend \u2014 no full page reload required.</p> <p>You define state in PHP using <code>createState()</code>, and update it from JavaScript using <code>phpspa.setState()</code>.</p> <p>Let\u2019s break it down with a basic counter app.</p>"},{"location":"17-state-management/#1-define-state-in-php","title":"1\ufe0f\u20e3 Define State in PHP","text":"<p>Inside your component function, you define state like this:</p> <pre><code>use function phpSPA\\Component\\createState;\n\n$counter = createState('count', 0); // 'count' is the unique state key\n</code></pre> <ul> <li><code>'count'</code> is the state key \u2014 it identifies what part of state you're working with.</li> <li><code>0</code> is the default value used on first load.</li> <li><code>$counter()</code> gets the current value (after any updates from frontend).</li> </ul>"},{"location":"17-state-management/#2-use-the-value-in-your-component","title":"2\ufe0f\u20e3 Use the Value in Your Component","text":"<pre><code>return &lt;&lt;&lt;HTML\n   &lt;div&gt;\n      &lt;h1&gt;Counter: $counter&lt;/h1&gt;\n      &lt;button id=\"increment\"&gt;Increment&lt;/button&gt;\n   &lt;/div&gt;\n\n   &lt;script data-type=\"phpspa/script\"&gt;\n      document.getElementById('increment').addEventListener('click', () =&gt; {\n         phpspa.setState('count', $counter + 1);\n      });\n   &lt;/script&gt;\nHTML;\n</code></pre> <ul> <li>When the user clicks the button, the frontend tells the backend: \"Set <code>counter</code> to new value.\"</li> <li>phpSPA runs the component again (on the server) with the updated state.</li> <li>The new HTML is swapped in automatically \u2014 without a full page reload.</li> </ul>"},{"location":"17-state-management/#what-just-happened","title":"\ud83d\udd04 What Just Happened?","text":"<p>Here\u2019s the full cycle of <code>createState()</code> and <code>phpspa.setState()</code>:</p> Step What Happens 1. PHP: <code>createState('count', 0)</code> Registers the state with a default value 2. JS: <code>phpspa.setState('count', 5)</code> Sends new state value to server 3. phpSPA re-renders Component gets re-run with <code>count = 5</code> 4. Result HTML updates without reloading the page"},{"location":"17-state-management/#notes","title":"\u26a0\ufe0f Notes","text":"<ul> <li>The first argument is always the state key.</li> <li>Each state key is shared globally across all components \u2014 if you use the same key in different components, it will be shared.</li> <li><code>setState()</code> always returns a promise \u2014 you can <code>.then()</code> it to do something after render.</li> </ul>"},{"location":"17-state-management/#updating-state-from-php","title":"\ud83d\udee0 Updating State from PHP","text":"<p>You\u2019re not limited to frontend updates \u2014 you can also update state inside your PHP component by calling the state function with a new value:</p> <pre><code>$counter = createState('count', 0);\n\nif (someCondition()) {\n    $counter(4); // This updates the 'count' state on the server\n}\n\n$count = $counter(); // Now $count is 4\n</code></pre>"},{"location":"17-state-management/#why-use-this","title":"\ud83d\udd04 Why Use This?","text":"<ul> <li>Set state based on form submissions or backend logic</li> <li>Reset or initialize values after an action</li> <li>Fully control flow without needing JavaScript</li> </ul> <p>\u261d\ufe0f After setting the value, you can still access the updated value by calling the function again.</p>"},{"location":"17-state-management/#full-working-counter-component","title":"\u2705 Full Working Counter Component","text":"<pre><code>use phpSPA\\Component;\nuse function phpSPA\\Component\\createState;\n\nfunction Counter(): string\n{\n   $counter = createState('count', 0);\n\n   return &lt;&lt;&lt;HTML\n      &lt;div&gt;\n         &lt;h2&gt;Count: $counter&lt;/h2&gt;\n         &lt;button id=\"inc\"&gt;Count&lt;/button&gt;\n      &lt;/div&gt;\n\n      &lt;script data-type=\"phpspa/script\"&gt;\n         document.getElementById('inc').addEventListener('click', () =&gt; {\n            phpspa.setState('count', $counter + 1);\n         });\n      &lt;/script&gt;\n   HTML;\n}\n\nreturn (new Component('Counter'))\n   -&gt;route('/counter')\n   -&gt;method('GET')\n   -&gt;title('Counter Example');\n</code></pre>"},{"location":"17-state-management/#manual-setup-including-createstate-without-composer","title":"\u26a0\ufe0f Manual Setup: Including <code>createState</code> Without Composer","text":"<p>If you\u2019re not using Composer, or for some reason the autoloading isn't working correctly, you\u2019ll need to manually include the <code>createState</code> function.</p>"},{"location":"17-state-management/#step-1-include-the-createstate-file","title":"\u2705 Step 1: Include the <code>createState</code> File","text":"<p>Make sure you add this at the top of your component file:</p> <pre><code>include_once __DIR__ . '/vendor/dconco/phpspa/app/core/Component/createState.php';\n</code></pre> <p>Adjust the path if you're not using <code>vendor/</code> or if you're keeping <code>phpSPA</code> somewhere else.</p>"},{"location":"17-state-management/#step-2-import-the-function-namespace","title":"\u2705 Step 2: Import the Function Namespace","text":"<p>Right after your <code>include_once</code>, don\u2019t forget to import the namespace for the state function:</p> <pre><code>use function phpSPA\\Component\\createState;\n</code></pre> <p>\u261d\ufe0f <code>createState</code> is defined in a namespaced file \u2014 you must use <code>use function</code> or it won\u2019t work.</p> <p>\u27a1\ufe0f Up next: Per-Component Scripts and Styles in PHP</p>"},{"location":"18-component-script-and-styles/","title":"\ud83c\udfaf Per-Component Scripts and Styles in PHP","text":"<p>In phpSPA, you can attach custom JavaScript and CSS styles directly from your PHP components, and they\u2019ll be injected automatically when that component is rendered.</p> <p>This helps keep logic encapsulated per route, avoiding bloated global files.</p>"},{"location":"18-component-script-and-styles/#why-use-this","title":"\ud83e\udde0 Why use this?","text":"<p>Because phpSPA swaps out components dynamically on route changes, you might want certain styles or scripts to only load when their corresponding component is active.</p> <p>phpSPA handles that for you by allowing you to define:</p> <ul> <li>Per-component JavaScript via <code>$component-&gt;script()</code></li> <li>Per-component CSS via <code>$component-&gt;styleSheet()</code></li> </ul>"},{"location":"18-component-script-and-styles/#add-javascript-with-component-script","title":"\ud83e\uddfe Add JavaScript with <code>$component-&gt;script()</code>","text":"<p>Use this method to define JS logic that should run when this component is rendered.</p> <pre><code>$comp-&gt;script(fn() =&gt; &lt;&lt;&lt;JS\n    console.log(\"Dashboard component loaded\");\n\n    document.getElementById(\"refresh\").addEventListener(\"click\", () =&gt; {\n        phpspa.reload();\n    });\nJS);\n</code></pre> <p>This script will be wrapped automatically and attached to the DOM only while this component is active.</p> <p>You can call <code>.script()</code> multiple times; phpSPA will append them in the order you define.</p>"},{"location":"18-component-script-and-styles/#add-styles-with-component-stylesheet","title":"\ud83c\udfa8 Add Styles with <code>$component-&gt;styleSheet()</code>","text":"<p>Want to add scoped styles just for one route? Use:</p> <pre><code>$comp-&gt;styleSheet(fn() =&gt; &lt;&lt;&lt;CSS\n    .dashboard-title {\n        font-size: 24px;\n        font-weight: bold;\n    }\n\n    #refresh {\n        margin-top: 10px;\n    }\nCSS);\n</code></pre> <p>This CSS will be injected into a <code>&lt;style data-type=\"phpspa/css\"&gt;</code> block and removed automatically when the component unmounts.</p> <p>Like with <code>.script()</code>, you can call <code>.styleSheet()</code> multiple times.</p>"},{"location":"18-component-script-and-styles/#example-usage","title":"\u2728 Example Usage","text":"<pre><code>$dashboard = new Component(\"Dashboard\");\n\n$dashboard-&gt;route(\"/dashboard\");\n$dashboard-&gt;title(\"Dashboard\");\n\n$dashboard-&gt;styleSheet(fn() =&gt; &lt;&lt;&lt;CSS\n    body {\n        background-color: #f5f5f5;\n    }\nCSS);\n\n$dashboard-&gt;script(fn() =&gt; &lt;&lt;&lt;JS\n    console.log(\"Welcome to the dashboard!\");\nJS);\n</code></pre>"},{"location":"18-component-script-and-styles/#how-it-works","title":"\ud83d\udd0d How It Works","text":"<p>Behind the scenes, phpSPA scans for any registered styles and scripts on the server side and outputs them into:</p> <ul> <li><code>&lt;style data-type=\"phpspa/css\"&gt;...&lt;/style&gt;</code></li> <li><code>&lt;script data-type=\"phpspa/script\"&gt;...&lt;/script&gt;</code></li> </ul> <p>The frontend JavaScript part (<code>phpspa-js</code>) handles mounting and cleanup as you navigate between components.</p> <p>\u27a1\ufe0f Up next: Handling Loading State</p>"},{"location":"19-handling-loading-states/","title":"\ud83c\udf00 Handling a Simple Loading State in phpSPA","text":"<p>In many forms (like login), it's common to show a loading indicator while processing the request. You can use <code>createState()</code> in PHP to handle this easily.</p>"},{"location":"19-handling-loading-states/#step-1-define-the-state-in-php","title":"\u2705 Step 1: Define the State in PHP","text":"<pre><code>use function phpSPA\\Component\\createState;\n\n$loading = createState('loading', 'false');\n</code></pre> <p>This creates a state named <code>\"loading\"</code> that defaults to <code>false</code>. You can now use <code>$loading</code> as a string (<code>\"true\"</code> or <code>\"false\"</code>) to update the UI.</p>"},{"location":"19-handling-loading-states/#bonus-define-the-login-state-optional","title":"\u2705 Bonus: Define the Login State (Optional)","text":"<p>If you're handling the login data too:</p> <pre><code>$login = createState('login', [\n   'username' =&gt; null,\n   'password' =&gt; null\n]);\n\n$username = $login()['username'];\n$password = $login()['password'];\n</code></pre> <p>Use that however you want \u2014 like verifying login or returning errors.</p>"},{"location":"19-handling-loading-states/#step-2-render-html-based-on-loading-state","title":"\u2705 Step 2: Render HTML Based on Loading State","text":"<p>Here we update the button's label and disable it when loading:</p> <pre><code>$loadingText = \"$loading\" === \"true\" ? 'Loading...' : 'LOGIN';\n$buttonDisabled = \"$loading\" === \"true\" ? 'disabled' : '';\n\n$buttonHtml = \"&lt;button id=\\\"btn\\\" $buttonDisabled&gt;$loadingText&lt;/button&gt;\";\n</code></pre> <p>Now render that inside your form:</p> <pre><code>return &lt;&lt;&lt;HTML\n   &lt;form method=\"POST\" action=\"\"&gt;\n      &lt;label&gt;Username:&lt;/label&gt;\n      &lt;input type=\"text\" id=\"username\" /&gt;\n\n      &lt;label&gt;Password:&lt;/label&gt;\n      &lt;input type=\"password\" id=\"password\" /&gt;\n\n      $buttonHtml\n   &lt;/form&gt;\n\n   &lt;script data-type=\"phpspa/script\"&gt;\n      const btn = document.getElementById(\"btn\");\n\n      btn.addEventListener(\"click\", (e) =&gt; {\n         e.preventDefault();\n\n         const username = document.getElementById(\"username\").value;\n         const password = document.getElementById(\"password\").value;\n\n         if (username.trim() !== \"\" &amp;&amp; password.trim() !== \"\") {\n            phpspa.setState(\"loading\", \"true\")\n               .then(() =&gt; phpspa.setState(\"login\", { username, password }))\n               .then(() =&gt; phpspa.setState(\"loading\", \"false\"));\n         }\n      });\n   &lt;/script&gt;\nHTML;\n</code></pre>"},{"location":"19-handling-loading-states/#summary","title":"\u2705 Summary","text":"<ul> <li><code>createState('loading', 'false')</code> creates a loading flag.</li> <li>You read its value in PHP using <code>\"$loading\"</code>.</li> <li>From JS, you update it with <code>phpspa.setState(\"loading\", \"true\" | \"false\")</code>.</li> <li>The UI updates reactively on the next render.</li> </ul> <p>\u27a1\ufe0f Up next: Request Handling</p>"},{"location":"2-getting-started/","title":"\ud83d\ude80 Getting Started","text":"<p>Welcome! Let\u2019s get phpSPA running step by step \u2014 no rush, no pressure.</p>"},{"location":"2-getting-started/#installation","title":"\ud83d\udce6 Installation","text":""},{"location":"2-getting-started/#option-1-composer-recommended","title":"Option 1: Composer (Recommended)","text":"<p>If you\u2019re using Composer (which you probably should), install phpSPA like this:</p> <pre><code>composer require dconco/phpspa\n</code></pre> <p>Done \u2705</p>"},{"location":"2-getting-started/#option-2-manual-setup","title":"Option 2: Manual Setup","text":"<p>Not using Composer? No problem.</p> <ol> <li>Download or clone the phpSPA repo from GitHub:</li> </ol> <pre><code>git clone https://github.com/dconco/phpspa.git\n</code></pre> <ol> <li> <p>Inside the repo, the two main classes you\u2019ll need are:</p> </li> <li> <p><code>path/to/phpspa/app/core/App.php</code></p> </li> <li> <p><code>path/to/phpspa/app/core/Component.php</code></p> </li> <li> <p>Require them manually in your project:</p> </li> </ol> <pre><code>require_once \"path/to/phpspa/app/core/App.php\";\nrequire_once \"path/to/phpspa/app/core/Component.php\";\n</code></pre>"},{"location":"2-getting-started/#the-basic-setup","title":"\ud83e\uddf1 The Basic Setup","text":"<p>To use phpSPA, you\u2019ll define two things:</p> <ol> <li>A layout \u2013 this is the main HTML structure of your page.</li> <li>An App instance \u2013 it uses your layout and loads components into it.</li> </ol> <p>Here\u2019s a super basic example:</p> <pre><code>use phpSPA\\App;\n\nfunction layout() {\n    return &lt;&lt;&lt;HTML\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;div id=\"app\"&gt;\n                    __CONTENT__\n                &lt;/div&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n    HTML;\n}\n\n$app = new App(layout);\n$app-&gt;defaultTargetID('app'); // Optional, defines where dynamic content will go\n</code></pre>"},{"location":"2-getting-started/#whats-happening-here","title":"\ud83e\udde0 What\u2019s happening here?","text":"<ul> <li><code>layout()</code> returns the HTML shell of your page.</li> <li>Inside the layout, <code>__CONTENT__</code> is a special placeholder. It\u2019ll be replaced with your component\u2019s HTML.</li> <li><code>defaultTargetID()</code> sets the element ID where content will update when navigating between components.</li> </ul>"},{"location":"2-getting-started/#whats-next","title":"\ud83d\udd27 What\u2019s Next?","text":"<p>Once your app is set up, the next step is to create a component.</p> <p>\u27a1\ufe0f Continue to: Creating Your First Component</p>"},{"location":"20-request-handling/","title":"\ud83d\udcec Request Handling in phpSPA","text":"<p>phpSPA provides a built-in <code>Request</code> object that simplifies access to query parameters, form inputs, file uploads, authentication headers, and more.</p> <p>You can access the request object by adding <code>$request</code> as an argument in your component functions:</p> <pre><code>function LoginComponent($path = [], $request = null) {\n   $username = $request(\"username\"); // gets from $_REQUEST['username']\n}\n</code></pre>"},{"location":"20-request-handling/#getting-request-parameters","title":"\ud83d\udd11 Getting Request Parameters","text":"<p>You can access any form or query input using the <code>Request</code> object like a function:</p> <pre><code>$username = $request(\"username\"); // checks $_REQUEST\n$password = $request(\"password\", \"default\"); // with default fallback\n</code></pre> <p>This method automatically validates the input for safety.</p>"},{"location":"20-request-handling/#handling-file-uploads","title":"\ud83d\udcc2 Handling File Uploads","text":"<p>Use <code>$request-&gt;files()</code> to access uploaded files. You can fetch all files or a specific one by name:</p> <pre><code>$file = $request-&gt;files(\"avatar\");\n\nif ($file) {\n   move_uploaded_file($file[\"tmp_name\"], \"uploads/\" . $file[\"name\"]);\n}\n</code></pre> <p>Returns <code>null</code> if the file doesn't exist or failed to upload.</p>"},{"location":"20-request-handling/#api-key-validation","title":"\ud83d\udd10 API Key Validation","text":"<p>If you're building APIs, you can validate API keys directly from headers:</p> <pre><code>if ($request-&gt;apiKey(\"X-My-Api-Key\")) {\n   // Valid API key present\n}\n</code></pre> <p>The header name defaults to <code>'Api-Key'</code> if not specified.</p>"},{"location":"20-request-handling/#getting-auth-credentials","title":"\ud83e\uddfe Getting Auth Credentials","text":"<p>The <code>$request-&gt;auth()</code> method gives you access to Basic Auth or Bearer tokens (from headers):</p> <pre><code>$auth = $request-&gt;auth();\n\n$basicUser = $auth-&gt;basic[\"user\"];\n$bearerToken = $auth-&gt;bearer;\n</code></pre> <p>Useful for building protected endpoints or user sessions.</p>"},{"location":"20-request-handling/#parsing-query-parameters","title":"\ud83e\udded Parsing Query Parameters","text":"<p>You can also get structured query string data using <code>urlQuery()</code>:</p> <pre><code>$params = $request-&gt;urlQuery();       // returns object of all query params\n$token = $request-&gt;urlQuery(\"token\"); // gets one query param\n</code></pre> <p>This parses <code>?key=value</code> style queries and returns validated values.</p>"},{"location":"20-request-handling/#csrf-protection","title":"\u26a0\ufe0f CSRF Protection","text":"<p>CSRF protection is not yet included. A dedicated token and validation system will be available in the next version.</p>"},{"location":"20-request-handling/#summary","title":"\u2705 Summary","text":"Feature Usage Input parameter <code>$request(\"key\", $default)</code> File upload <code>$request-&gt;files(\"input_name\")</code> API key check <code>$request-&gt;apiKey(\"Header-Name\")</code> Auth (Basic/Bearer) <code>$request-&gt;auth()</code> Parsed URL query <code>$request-&gt;urlQuery(\"key\")</code> <p>\u27a1\ufe0f Up next: Final Notes</p>"},{"location":"3-creating-your-first-component/","title":"\ud83e\udde9 Creating Your First Component","text":"<p>In phpSPA, components are the heart of your app. A component is just a PHP function that returns a chunk of HTML \u2014 no class inheritance or special syntax needed.</p> <p>Let\u2019s walk through the process step by step:</p>"},{"location":"3-creating-your-first-component/#step-1-create-the-layout-function","title":"\u2705 Step 1: Create the Layout Function","text":"<p>You\u2019ll start by defining a layout function that returns the full HTML page. It must include the <code>__CONTENT__</code> placeholder, which phpSPA will replace with the component\u2019s output.</p> <pre><code>function layout() {\n    return &lt;&lt;&lt;HTML\n        &lt;html&gt;\n            &lt;head&gt;\n                &lt;title&gt;My phpSPA App&lt;/title&gt;\n            &lt;/head&gt;\n            &lt;body&gt;\n                &lt;div id=\"app\"&gt;\n                    __CONTENT__\n                &lt;/div&gt;\n                &lt;script src=\"https://cdn.jsdelivr.net/npm/phpspa-js\"&gt;&lt;/script&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\n    HTML;\n}\n</code></pre>"},{"location":"3-creating-your-first-component/#step-2-create-the-app-instance","title":"\u2705 Step 2: Create the App Instance","text":"<p>Now you\u2019ll set up the <code>App</code> instance and optionally define a default target element ID for components to render into.</p> <pre><code>use phpSPA\\App;\n\n$app = new App(layout);\n$app-&gt;defaultTargetID(\"app\"); // Optional: default ID for content rendering\n</code></pre>"},{"location":"3-creating-your-first-component/#step-3-write-a-component-function","title":"\u2705 Step 3: Write a Component Function","text":"<p>Here\u2019s a super simple component:</p> <pre><code>function Home() {\n    return \"&lt;h1&gt;Welcome to my site!&lt;/h1&gt;\";\n}\n</code></pre> <p>\u261d\ufe0f A component is just a plain PHP function. No need for special syntax or templating.</p>"},{"location":"3-creating-your-first-component/#step-4-register-the-component","title":"\u2705 Step 4: Register the Component","text":"<p>Wrap your function in the <code>Component</code> class, and assign it to a route:</p> <pre><code>use phpSPA\\Component;\n\n$home = new Component('Home');\n$home-&gt;route(\"/\"); // Show this component at the root URL\n</code></pre> <p>You can also set:</p> <pre><code>$home-&gt;method(\"GET\");        // Optional: set HTTP method(s)\n$home-&gt;targetID(\"main\");     // Optional: override the default render target\n$home-&gt;title(\"Home Page\");   // Optional: sets document.title when shown\n</code></pre> <p>\ud83d\udca1 <code>targetID()</code> is only needed if you want to render into a different element instead of the app\u2019s default.</p>"},{"location":"3-creating-your-first-component/#step-5-attach-and-run","title":"\u2705 Step 5: Attach and Run","text":"<p>Now, connect the component to the app and start it:</p> <pre><code>$app-&gt;attach($home); // Attach the component\n$app-&gt;run();         // Start the app\n</code></pre>"},{"location":"3-creating-your-first-component/#final-example","title":"\u2705 Final Example","text":"<p>Here\u2019s how everything fits together:</p> <pre><code>use phpSPA\\App;\nuse phpSPA\\Component;\n\nfunction layout() {\n    return &lt;&lt;&lt;HTML\n    &lt;html&gt;\n        &lt;head&gt;&lt;title&gt;My phpSPA App&lt;/title&gt;&lt;/head&gt;\n        &lt;body&gt;\n            &lt;div id=\"app\"&gt;\n                __CONTENT__\n            &lt;/div&gt;\n            &lt;script src=\"https://cdn.jsdelivr.net/npm/phpspa-js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\nHTML;\n}\n\nfunction Home() {\n    return \"&lt;h1&gt;Welcome to my site!&lt;/h1&gt;\";\n}\n\n$app = new App(layout);\n$app-&gt;defaultTargetID(\"app\");\n\n$home = new Component('Home');\n$home-&gt;route(\"/\");\n$home-&gt;method(\"GET\");\n$home-&gt;title(\"Home Page\");\n\n$app-&gt;attach($home);\n$app-&gt;run();\n</code></pre>"},{"location":"3-creating-your-first-component/#what-happens-when-you-visit","title":"\ud83d\udd04 What Happens When You Visit <code>/</code>?","text":"<ul> <li>The app matches the route to <code>/</code></li> <li>It renders the <code>Home()</code> component</li> <li>The returned HTML replaces the <code>__CONTENT__</code> part of the layout</li> <li>All without reloading the full page</li> </ul> <p>\u27a1\ufe0f Next up: Understanding Routing and Parameters</p>"},{"location":"4-routing-and-parameters/","title":"\ud83e\udded Routing and Parameters","text":"<p>phpSPA lets you define clean routes for your components \u2014 and yes, you can pass parameters too.</p> <p>Let\u2019s walk through how routing works, one step at a time.</p>"},{"location":"4-routing-and-parameters/#basic-route","title":"\u2705 Basic Route","text":"<p>You\u2019ve already seen this:</p> <pre><code>$home = new Component('Home');\n$home-&gt;route(\"/\");\n</code></pre> <p>This just tells phpSPA:</p> <p>\u201cRender the <code>Home()</code> component when the user visits <code>/</code>.\u201d</p> <p>Easy.</p>"},{"location":"4-routing-and-parameters/#dynamic-routes-with-parameters","title":"\ud83d\udd22 Dynamic Routes (with Parameters)","text":"<p>You can pass values in the URL using curly braces <code>{}</code>.</p> <p>Example:</p> <pre><code>$profile = new Component('Profile');\n$profile-&gt;route(\"/profile/{id}\");\n</code></pre> <p>Now if someone visits <code>/profile/42</code>, the number <code>42</code> will be passed to your <code>Profile</code> function.</p>"},{"location":"4-routing-and-parameters/#how-to-access-parameters","title":"\ud83e\udde0 How to Access Parameters","text":"<p>phpSPA injects route parameters into your component automatically \u2014 using a special <code>$path</code> argument.</p> <pre><code>function Profile(array $path = []) {\n    $userId = $path[\"id\"];\n    return \"&lt;h2&gt;User ID: $userId&lt;/h2&gt;\";\n}\n</code></pre>"},{"location":"4-routing-and-parameters/#important-rules","title":"Important Rules","text":"<ul> <li>The argument must be named <code>$path</code>.</li> <li>It must be type-hinted as <code>array</code> (or just left untyped).</li> <li>It can be placed anywhere in your function arguments.</li> <li>It has a default value (<code>= []</code>) if you are to reuse the component.</li> </ul>"},{"location":"4-routing-and-parameters/#reading-query-parameters-like-page2","title":"\ud83d\udcec Reading Query Parameters (like <code>?page=2</code>)","text":"<p>To access query strings (e.g., <code>/search?term=apple</code>), use a <code>$request</code> parameter.</p> <pre><code>use phpSPA\\Http\\Request;\n\nfunction Search(array $path = [], Request $request) {\n    $term = $request(\"term\");\n    return \"&lt;h2&gt;Searching for: $term&lt;/h2&gt;\";\n}\n</code></pre> <p>\u2705 <code>$request(\"key\")</code> works like <code>$_GET[\"key\"]</code> \u2014 but cleaner.</p>"},{"location":"4-routing-and-parameters/#rules-for-request","title":"Rules for <code>$request</code>","text":"<ul> <li>The argument must be named <code>$request</code>.</li> <li>It should be type-hinted as <code>phpSPA\\Http\\Request</code> (or just left untyped).</li> <li>Like <code>$path</code>, it should have a default value if you\u2019re calling it manually or nesting.</li> </ul>"},{"location":"4-routing-and-parameters/#nesting-components","title":"\ud83e\udde9 Nesting Components","text":"<p>If you\u2019re calling a component from inside another component \u2014 and the route doesn\u2019t apply \u2014 you\u2019ll still need to include these parameters with default values, like this:</p> <pre><code>function MiniCard(array $path = [], Request $request = new Request()) {\n    return \"&lt;p&gt;This is a reusable UI component.&lt;/p&gt;\";\n}\n</code></pre> <p>Then call it normally inside another function:</p> <pre><code>function Dashboard() {\n    return MiniCard(); // works fine!\n}\n</code></pre>"},{"location":"4-routing-and-parameters/#quick-example","title":"\ud83e\uddea Quick Example","text":"<pre><code>function User(array $path = [], Request $request = new Request()) {\n    $id = $path[\"id\"] ?? \"unknown\";\n    $lang = $request(\"lang\");\n\n    return \"&lt;h1&gt;User $id (Language: $lang)&lt;/h1&gt;\";\n}\n\n$user = new Component('User');\n$user-&gt;route(\"/user/{id}\");\n</code></pre> <p>Visit <code>/user/9?lang=en</code> and it shows:</p> <pre><code>&lt;h1&gt;User 9 (Language: en)&lt;/h1&gt;\n</code></pre> <p>That\u2019s it for routing \u2014 clean and simple.</p> <p>\u27a1\ufe0f Next: Route Patterns &amp; Param Types</p>"},{"location":"5-route-patterns-and-param-types/","title":"\ud83e\uddf0 Route Patterns &amp; Param Types","text":"<p>phpSPA\u2019s routing system goes beyond just matching static or dynamic URLs \u2014 it supports route patterns (like wildcards) and even typed parameters (so you can validate values right in the route). Let\u2019s break them down.</p>"},{"location":"5-route-patterns-and-param-types/#route-patterns","title":"\ud83d\udd00 Route Patterns","text":"<p>Sometimes, you don\u2019t want to match a specific path like <code>/admin/dashboard</code> \u2014 you want a pattern like <code>/admin/*</code> that catches anything under <code>/admin</code>.</p> <p>phpSPA lets you write that like this:</p> <pre><code>$adminPanel = new Component('Admin');\n$adminPanel-&gt;route(\"pattern: /admin/*\");\n</code></pre> <p>\ud83e\udde0 When the route starts with <code>pattern:</code>, phpSPA switches to pattern matching mode using <code>fnmatch()</code> behind the scenes.</p>"},{"location":"5-route-patterns-and-param-types/#what-can-you-do-with-route-patterns","title":"\ud83e\udd14 What can you do with route patterns?","text":"<p>Here are some examples:</p> Pattern Matches <code>pattern: /admin/*</code> <code>/admin</code>, <code>/admin/users</code>, <code>/admin/42</code> <code>pattern: /blog/*.html</code> <code>/blog/post.html</code>, <code>/blog/a.html</code> <code>pattern: /files/*.zip</code> <code>/files/latest.zip</code>, <code>/files/backup.zip</code> <p>\ud83d\udd12 This is super useful for grouping routes, catching unmatched paths, or building admin sections with minimal routing logic.</p>"},{"location":"5-route-patterns-and-param-types/#parameter-types","title":"\ud83d\udd21 Parameter Types","text":"<p>phpSPA lets you enforce types on route parameters \u2014 so only valid values match the route. Here\u2019s how it works.</p>"},{"location":"5-route-patterns-and-param-types/#basic-typed-param","title":"\u2705 Basic Typed Param","text":"<pre><code>$profile = new Component('Profile');\n$profile-&gt;route(\"/profile/{id: int}\");\n</code></pre> <p>If a user visits <code>/profile/42</code>, it matches. If they visit <code>/profile/hello</code>, it doesn\u2019t.</p>"},{"location":"5-route-patterns-and-param-types/#supported-param-types","title":"\ud83d\udcda Supported Param Types","text":"Type Description <code>int</code> / <code>integer</code> Must be a number like <code>42</code> <code>bool</code> Accepts <code>true</code>, <code>false</code>, <code>1</code>, <code>0</code> <code>string</code> Any plain text <code>alpha</code> Only letters (<code>a-zA-Z</code>) <code>alphanum</code> Letters and numbers only <code>json</code> Must be valid JSON (decoded) <code>array</code> Accepts JSON arrays (or exploded query-like strings)"},{"location":"5-route-patterns-and-param-types/#advanced-example","title":"\ud83e\udd2f Advanced Example","text":"<pre><code>$comp = new Component('Handle');\n$comp-&gt;route(\"/data/{info: array&lt;string, array&lt;int, bool&gt;&gt;}\");\n</code></pre> <p>This route matches only if the URL provides a valid array value in <code>info</code>, like via a query or a JSON-encoded segment (depending on how you're building the URL). Otherwise, phpSPA skips it.</p>"},{"location":"5-route-patterns-and-param-types/#why-use-typed-params","title":"\ud83e\udde0 Why Use Typed Params?","text":"<p>There are a few solid reasons:</p> <ul> <li>\u2705 Cleaner validation \u2014 no need to check <code>is_numeric()</code> manually.</li> <li>\ud83d\udd25 Better routing control \u2014 if types don\u2019t match, the route is skipped entirely.</li> <li>\u26a0\ufe0f Safer components \u2014 no chance your route logic gets weird data it wasn\u2019t expecting.</li> <li>\ud83c\udfaf Intentional design \u2014 your routes declare exactly what kind of data they\u2019re meant for.</li> </ul>"},{"location":"5-route-patterns-and-param-types/#what-happens-on-mismatch","title":"\ud83d\uded1 What Happens on Mismatch?","text":"<p>If the parameter value doesn\u2019t match the expected type, phpSPA just ignores the route \u2014 it won\u2019t run the component. This helps prevent accidental matches or invalid behavior.</p> <p>You can use typed params and patterns together too \u2014 they\u2019re totally compatible.</p> <p>That\u2019s a wrap on patterns and types!</p> <p>\u27a1\ufe0f Next: Loading Events</p>"},{"location":"6-loading-events/","title":"\u23f3 Loading Event Hooks","text":"<p>Sometimes when a route is loading \u2014 especially over AJAX \u2014 you don\u2019t want your users staring at a blank page. That\u2019s where loading states come in.</p> <p>In <code>phpSPA</code>, loading states are handled using event hooks you can register globally or per-component. These give you full control over UI behaviors during navigation.</p>"},{"location":"6-loading-events/#global-loading-via-events","title":"\ud83e\uddee Global Loading via Events","text":"<p>Hook into the <code>beforeload</code> and <code>load</code> lifecycle events using:</p> <pre><code>phpspa.on(\"beforeload\", ({ route }) =&gt; {\n    // Show a global spinner\n});\n\nphpspa.on(\"load\", ({ route, success, error }) =&gt; {\n    // Hide spinner and handle result\n});\n</code></pre>"},{"location":"6-loading-events/#parameters-explained","title":"\ud83d\udccc Parameters Explained","text":"<p>Each event gives you context about what\u2019s happening:</p> <ul> <li><code>route</code>: the path being navigated to (string)</li> <li><code>success</code>: <code>true</code> if the component loaded successfully</li> <li><code>error</code>: contains an error object if something went wrong, otherwise <code>null</code></li> </ul> <p>This means you can gracefully handle loading errors, display route-specific logic, or just log transitions.</p>"},{"location":"6-loading-events/#example-with-css-spinner","title":"\ud83c\udfa8 Example with CSS Spinner","text":"<pre><code>&lt;script&gt;\n    phpspa.on(\"beforeload\", ({ route }) =&gt; {\n        const loader = document.createElement(\"div\");\n        loader.className = \"loader\";\n        loader.id = \"global-loader\";\n        document.body.appendChild(loader);\n        console.log(\"Navigating to:\", route);\n    });\n\n    phpspa.on(\"load\", ({ route, success, error }) =&gt; {\n        document.getElementById(\"global-loader\")?.remove();\n\n        if (!success) {\n            console.error(\"Failed to load:\", route);\n            alert(\"Something went wrong loading this page.\");\n        }\n    });\n&lt;/script&gt;\n\n&lt;style&gt;\n.loader {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    width: 30px;\n    height: 30px;\n    border: 4px solid #ccc;\n    border-top-color: #007bff;\n    border-radius: 50%;\n    animation: spin 0.8s linear infinite;\n    z-index: 9999;\n}\n@keyframes spin {\n    to { transform: rotate(360deg); }\n}\n&lt;/style&gt;\n</code></pre>"},{"location":"6-loading-events/#per-component-loading","title":"\ud83e\udde9 Per-Component Loading","text":"<p>You can still use <code>&lt;script type=\"phpspa/script\"&gt;</code> inside a component to define loading behavior that only applies when that component is loaded:</p> <pre><code>&lt;script type=\"phpspa/script\"&gt;\n    phpspa.on(\"beforeload\", ({ route }) =&gt; {\n        // This only runs when this component is being loaded\n    });\n\n    phpspa.on(\"load\", ({ success }) =&gt; {\n        if (!success) {\n            alert(\"Failed to load this view.\");\n        }\n    });\n&lt;/script&gt;\n</code></pre>"},{"location":"6-loading-events/#when-is-loading-shown","title":"\ud83d\udd04 When is loading shown?","text":"<ul> <li>Only during phpSPA navigations</li> <li>Not triggered during initial page load</li> </ul> <p>You\u2019re not required to define loading states, but they dramatically improve UX \u2014 especially on slow networks or large apps.</p> <p>\u27a1\ufe0f Up next: Layout and Content Swap Mechanism</p>"},{"location":"7-layout-and-content-swap-mechanism/","title":"\ud83e\uddf1 Layout and Content Swap Mechanism","text":"<p>At the heart of phpSPA is this: One layout. Swappable content. Smooth experience.</p> <p>The idea is simple: you define your base HTML layout once, and phpSPA will dynamically update just the main area (without full page reloads) whenever users navigate around.</p>"},{"location":"7-layout-and-content-swap-mechanism/#define-your-layout","title":"\ud83c\udfd7\ufe0f Define Your Layout","text":"<p>Your layout is just a function that returns HTML (usually with heredoc <code>&lt;&lt;&lt;HTML</code> for cleanliness):</p> <pre><code>function layout() {\n    return &lt;&lt;&lt;HTML\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;My App&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n            &lt;nav&gt; ... &lt;/nav&gt;\n            &lt;main&gt;\n                __CONTENT__\n            &lt;/main&gt;\n            &lt;script src=\"https://cdn.example.com/phpspa.js\"&gt;&lt;/script&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\nHTML;\n}\n</code></pre> <p>The special string <code>__CONTENT__</code> is where the active component will be inserted by phpSPA.</p>"},{"location":"7-layout-and-content-swap-mechanism/#setting-up-the-app","title":"\ud83d\ude80 Setting Up the App","text":"<p>Once you\u2019ve got your layout, you can initialize the app:</p> <pre><code>use phpSPA\\App;\n\n$app = new App('layout');\n</code></pre> <p><code>layout</code> is a callable \u2014 the function itself, not its output.</p>"},{"location":"7-layout-and-content-swap-mechanism/#default-target-id-optional","title":"\ud83c\udfaf Default Target ID (Optional)","text":"<p>By default, phpSPA uses the <code>__CONTENT__</code> placeholder for the initial render. But for dynamic navigations (handled via JavaScript), you can define the DOM element that should be replaced:</p> <pre><code>$app-&gt;defaultTargetID(\"main\");\n</code></pre> <p>This tells phpSPA\u2019s JavaScript to replace the <code>&lt;main&gt;</code> content when the route changes.</p>"},{"location":"7-layout-and-content-swap-mechanism/#add-a-component-and-run-the-app","title":"\ud83d\udce6 Add a Component and Run the App","text":"<p>Let\u2019s quickly register a sample component and finish the setup:</p> <pre><code>use phpSPA\\Component;\n\nfunction Home() {\n    return \"&lt;h1&gt;Welcome!&lt;/h1&gt;\";\n}\n\n$home = new Component('Home');\n$home-&gt;route(\"/\");\n$home-&gt;title(\"Home\");\n\n$app-&gt;attach($home);\n$app-&gt;run();\n</code></pre>"},{"location":"7-layout-and-content-swap-mechanism/#how-content-swap-works","title":"\ud83d\udd00 How Content Swap Works","text":"<ol> <li>User visits <code>/</code> \u2192 phpSPA sends layout + <code>Home</code> component inserted at <code>__CONTENT__</code>.</li> <li>User clicks a navigation link \u2192 JS intercepts it.</li> <li>JS requests just the new component HTML from the server.</li> <li>When it arrives, phpSPA updates the target area (e.g. <code>&lt;main&gt;</code>) without touching the rest of the page.</li> </ol> <p>\u26a1 All without a full page reload. This makes your app feel instant and smooth.</p>"},{"location":"7-layout-and-content-swap-mechanism/#notes","title":"\ud83d\udca1 Notes","text":"<ul> <li>Define your layout once \u2014 no need to duplicate markup.</li> <li>The <code>__CONTENT__</code> placeholder will be swapped with component content automatically.</li> <li>You can still control exactly where in the DOM the content swaps occur using <code>targetID()</code> on each component.</li> </ul> <p>\u27a1\ufe0f Up next: Component Rendering &amp; Target Areas</p>"},{"location":"8-component-rendering-and-target-areas/","title":"\ud83e\udde9 Component Rendering &amp; Target Areas","text":"<p>In phpSPA, each route is tied to a component, and every component is just a regular PHP function that returns HTML. You control exactly where its output shows up in the page \u2014 and how it behaves when dynamically swapped in.</p>"},{"location":"8-component-rendering-and-target-areas/#defining-a-component","title":"\ud83d\udee0\ufe0f Defining a Component","text":"<p>Here\u2019s a simple component:</p> <pre><code>function Home() {\n    return \"&lt;h1&gt;Welcome to the homepage!&lt;/h1&gt;\";\n}\n</code></pre> <p>To make this available to your app:</p> <pre><code>use phpSPA\\Component;\n\n$home = new Component('Home');\n$home-&gt;route(\"/\");\n</code></pre> <p>\ud83d\udd38 <code>Component</code> takes the function callable, not its return value or a string. So don\u2019t call it \u2014 just pass the function itself.</p>"},{"location":"8-component-rendering-and-target-areas/#specifying-http-methods-optional","title":"\ud83d\udd22 Specifying HTTP Methods (Optional)","text":"<p>You can control which HTTP methods the component responds to:</p> <pre><code>$home-&gt;method(\"GET\");\n</code></pre> <p>You can also allow multiple methods using a pipe <code>|</code> separator:</p> <pre><code>$login-&gt;method(\"GET|POST\");\n</code></pre> <ul> <li>This is especially useful for components that handle form submissions (<code>POST</code>) and normal page loads (<code>GET</code>).</li> </ul>"},{"location":"8-component-rendering-and-target-areas/#setting-page-titles-optional","title":"\ud83d\udcc4 Setting Page Titles (Optional)","text":"<p>Want to change the <code>&lt;title&gt;</code> when this component is loaded?</p> <pre><code>$home-&gt;title(\"Home Page\");\n</code></pre> <p>This automatically updates <code>document.title</code> in the browser when this component is shown.</p>"},{"location":"8-component-rendering-and-target-areas/#setting-a-target-area-optional","title":"\ud83c\udfaf Setting a Target Area (Optional)","text":"<p>By default, components render into the app's default target area (e.g., set using <code>$app-&gt;defaultTargetID(\"main\")</code>).</p> <p>But if you want a component to render elsewhere (like a specific div), override it:</p> <pre><code>$home-&gt;targetID(\"content\");\n</code></pre> <p>That tells phpSPA to update the element with ID <code>#content</code> when this route loads.</p> <p>\u26a0\ufe0f Use this for modals, sidebars, or custom layout sections.</p>"},{"location":"8-component-rendering-and-target-areas/#full-example","title":"\ud83d\udd01 Full Example","text":"<pre><code>use phpSPA\\Component;\n\nfunction Login() {\n    return \"&lt;form method='post'&gt;...&lt;/form&gt;\";\n}\n\n$login = new Component('Login');\n$login-&gt;route(\"/login\");\n$login-&gt;method(\"GET|POST\");\n$login-&gt;title(\"Login Page\");\n$login-&gt;targetID(\"main\"); // Optional if it matches default\n</code></pre>"},{"location":"8-component-rendering-and-target-areas/#summary","title":"\ud83e\udde0 Summary","text":"What You Can Do How Register a component <code>$comp = new Component('MyFn');</code> Set its route <code>$comp-&gt;route(\"/about\");</code> Allow HTTP methods `\\$comp-&gt;method(\"GET POST\");` Set browser title <code>$comp-&gt;title(\"Page Title\");</code> Change where it renders <code>$comp-&gt;targetID(\"sidebar\");</code> <p>\u27a1\ufe0f Next up: \ud83d\udce6 Component Nesting</p>"},{"location":"final-notes/","title":"\u2705 Final Notes","text":"<p>That\u2019s a wrap! You now have everything you need to build fast, dynamic, and modern PHP applications using phpSPA.</p> <p>Here\u2019s a quick summary of the most important concepts:</p>"},{"location":"final-notes/#core-concepts-recap","title":"\ud83e\udde0 Core Concepts Recap","text":"<ul> <li>Start your app with:</li> </ul> <pre><code>$app = new App(layoutFn);\n$app-&gt;defaultTargetID();\n</code></pre> <p>Use <code>__CONTENT__</code> as the render placeholder in your layout.</p> <ul> <li> <p>Components are regular PHP functions \u2014 no special syntax or templating engines.</p> </li> <li> <p>Use these methods to configure components:</p> </li> <li> <p><code>$component-&gt;route(\"/path\")</code></p> </li> <li><code>$component-&gt;targetID(\"container-id\")</code></li> <li><code>$component-&gt;method(\"GET|POST\")</code></li> <li><code>$component-&gt;title(\"Page Title\")</code></li> <li> <p><code>$component-&gt;meta(name: \"...\", content: \"...\")</code></p> </li> <li> <p>Route parameters (e.g. <code>/user/{id}</code>) are automatically parsed and passed via <code>$path</code>.</p> </li> <li> <p>Components can be reused or nested using:</p> </li> </ul> <pre><code>return &lt;&lt;&lt;HTML\n   &lt;div&gt;{MyComponent()}&lt;/div&gt;\nHTML;\n</code></pre> <ul> <li> <p>Use <code>$path = []</code> and <code>$request = null</code> as default arguments for reuse safety.</p> </li> <li> <p>Frontend navigation uses:</p> </li> <li> <p>Inline <code>&lt;Link to=\"/...\" label=\"...\" /&gt;</code></p> </li> <li> <p>JavaScript:</p> <pre><code>phpspa.navigate(\"/path\");\nphpspa.back();\nphpspa.forward();\nphpspa.reload();\n</code></pre> </li> </ul>"},{"location":"final-notes/#security","title":"\ud83d\udee1\ufe0f Security","text":"<p>phpSPA handles:</p> <ul> <li>Route parsing</li> <li>Param type validation</li> <li>Internal matching logic</li> </ul> <p>\u26a0\ufe0f CSRF protection is not included yet. It will be added in the next version with full support for tokens and validation helpers.</p>"},{"location":"final-notes/#performance-behavior-tips","title":"\u26a1 Performance &amp; Behavior Tips","text":"<ul> <li>Use wildcard routes like <code>/admin/*</code> for section grouping.</li> <li> <p>Control route casing with:</p> </li> <li> <p><code>$component-&gt;caseSensitive()</code></p> </li> <li><code>$component-&gt;caseInSensitive()</code></li> <li>Break your app into small components for clarity and speed.</li> <li>Use <code>createState()</code> for stateful, reactive components.</li> <li>Use <code>$component-&gt;script()</code> and <code>$component-&gt;styleSheet()</code> to attach per-component JS and CSS.</li> </ul>"},{"location":"final-notes/#contribute-or-explore","title":"\ud83d\udee0\ufe0f Contribute or Explore","text":"<ul> <li>GitHub: dconco/phpspa</li> <li>Composer: <code>dconco/phpspa</code></li> <li>Want to help? Feedback and pull requests are always welcome!</li> </ul>"},{"location":"final-notes/#whats-next","title":"\ud83d\ude80 What\u2019s Next?","text":"<p>Here are some things to try next:</p> <ul> <li>Build a reusable UI using phpSPA components.</li> <li>Store login/session data using state.</li> <li>Connect API endpoints and use <code>$request(\"key\")</code> to read query/form data.</li> <li>Add progressive enhancements using per-component scripts and styles.</li> </ul>"}]}